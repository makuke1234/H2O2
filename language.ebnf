<program> ::= [<block>]*

<block> ::= <statement> | "{" [<block>]* "}"


<statement> ::= <functionop>
| ("if" <boolexpression> <block> ["else" <block>])
| ("while" <boolexpression> <block>)
| ("for" [<variableop>] "," [<boolexpression>] "," <block>)
| "break"
| "continue"
| <variableop>
| ("goto" <label>)

<label> ::= <identifier> ':'


<functionop> ::= <functiondecl> | <functiondef> | <functioncall>

<functiondecl> ::= "sub" <identifier>
<functiondef> ::= <functiondecl> <block>
<functioncall> ::= <identifier> [<expression> ["," <expression>]*]


<variableop> ::= <variabledecl> | <variabledef>
<variabledecl> ::= "var" <identifier> ["=" <expression>]
<variabledef> ::= <identifier> "=" <expression>

<expression> ::= <strexpression> | <mathexpression>

<identifier> ::= <letter> [<letter> | <digit> | '_']*
<letter> ::= <lowercase> | <uppercase>
<lowercase> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<uppercase> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<character> ::= <letter> | <digit> | '_' | '-' | '+' | '*' | '/' | '\\' | '/'


<binarydigit> ::= '0' | '1'
<octaldigit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'
<digit> ::= <octaldigit> | '8' | '9'
<hexdigit> ::= <digit> | 'A' | 'B' | 'C' | 'D' | 'F' | 'a' | 'b' | 'c' | 'd' | 'f'

<strexpression> ::= <string> ["+" <string>]*
<string> ::= ("\"" [<character>]* "\"")
| ("str(" <mathexpression> ")")
| "inp()"
| <identifier>

<mathexpression> ::= [<addop>] <mathterm> [<addop> <mathterm>]*

<mathterm> ::= <mathfactor> [<mulop> <mathfactor>]*
<mathfactor> ::= <number>
| <identifier>
| ("val(" <strexpression> ")")
| ("(" <mathexpression> ")")

<numberbin> ::= "0b" <binarydigit>+
<numberoct> ::= "0" <octaldigit>+
<numberdec> ::= <digit>+
<numberhex> ::= ("0x" | "0X") <hexdigit>+

<numberint> ::= <numberbin>
| <numberoct>
| ['-'] <numberdec>
| <numberhex>

<number> ::= ['-'] <numberdec> ["." [<numberdec>]]

<boolexpression> ::= <boolterm> ["|" <boolterm>]*
<boolterm> ::= <boolfactor> ["&" <boolfactor>]*
<boolfactor> ::= (['!'] <mathexpression> [<relop> <mathexpression>])
| (['!'] <strexpression> [<relop> <strexpression>])
| "true"
| "false"

<addop> ::= '+' | '-'
<mulop> ::= '*' | '/'

<relop> ::= "=" | "!=" | "<" | ">" | "<=" | ">="